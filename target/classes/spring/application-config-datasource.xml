<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation=" 
          http://www.springframework.org/schema/beans 
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
          http://www.springframework.org/schema/tx 
          http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
          http://www.springframework.org/schema/context 
          http://www.springframework.org/schema/context/spring-context-3.0.xsd 
          http://www.springframework.org/schema/aop 
          http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
          http://www.springframework.org/schema/task        
          http://www.springframework.org/schema/task/spring-task-3.0.xsd
          http://www.springframework.org/schema/cache 
          http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!-- dbcp数据源 -->
	<bean name="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="5" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="5" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!--maxWait: 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 -->
		<property name="maxWait" value="3000" />
		<!--removeAbandoned: 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="true" />
		<!--removeAbandonedTimeout: 超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="180" />
		<property name="testOnBorrow" value="true" />
		<property name="validationQuery" value="${jdbc.validationQuery}" />
	</bean>

	<!--Hibernate配置,使用注解 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<!--【配置hibernate方言】 -->
				<!--org.hibernate.dialect.Oracle10gDialect -->
				<!--org.hibernate.dialect.Oracle9iDialect -->
				<!--org.hibernate.dialect.DB2Dialect -->
				<!--org.hibernate.dialect.InformixDialect -->
				<!--org.hibernate.dialect.SybaseDialect -->
				<!--org.hibernate.dialect.SQLServerDialect -->
				<!--org.hibernate.dialect.MySQL5Dialect -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">false</prop><!--【是否显示SQL】 -->
				<prop key="hibernate.format_sql">false</prop><!--【是否格式化SQL】 -->
				<prop key="hibernate.cache.use_second_levle_cache">false</prop><!--【是否开启二级缓存】 -->
				<prop key="hibernate.cache.use_query_cache">false</prop><!--【是否开启查询缓存】 -->
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop><!--【使用缓存类型】 -->
				<prop key="hibernate.cache.configurationResourceName">ehcache-failsafe.xml</prop><!--【缓存配置文件】 -->
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.yunxiaotian.**.entity</value><!-- 带注解的hibernate实体类 -->
			</list>
		</property>
	</bean>


	<!-- 配置Spring声明式事务 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 配置事务事务属性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<!-- 配置事务切点，并把切点和事务属性关联起来 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.yunxiaotian.**.service.*.*(..))"
			id="txPointcut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>

	<!-- ibatis 配置 -->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocations">
			<list>
				<value>classpath:ibatis-config.xml</value>
			</list>
		</property>
		<property name="mappingLocations">
			<list>
				<!-- 读取所有ibatis的sql配置 -->
				<value>classpath:ibatis/*.xml</value>
			</list>
		</property>
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<!-- 事务配置必须和iBatis一致 -->
		<property name="useTransactionAwareDataSource" value="true"></property>
	</bean>

	<!-- 由于使用了注解,在BaseService中使用sqlMapClientTemplate的时候需要定义 -->
	<bean id="sqlMapClientTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
		<property name="sqlMapClient" ref="sqlMapClient"></property>
	</bean>


	<!-- jdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

</beans>
